import pygame
import random

# 初始化游戏
pygame.init()

# 定义窗口尺寸
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600

# 定义方块大小和颜色
BLOCK_SIZE = 30
BLACK = (0, 0, 0)
CYAN = (0, 255, 255)
YELLOW = (255, 255, 0)
MAGENTA = (255, 0, 255)
ORANGE = (255, 165, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

# 创建窗口
window = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption("俄罗斯方块")

# 定义方块的形状
shapes = [
    [[1, 1, 1, 1]],
    [[1, 1], [1, 1]],
    [[1, 1, 0], [0, 1, 1]],
    [[0, 1, 1], [1, 1, 0]],
    [[1, 1, 1], [0, 1, 0]],
    [[1, 1, 1], [1, 0, 0]],
    [[1, 1, 1], [0, 0, 1]]
]

# 定义方块类
class Block:
    def __init__(self):
        self.shape = random.choice(shapes)
        self.color = random.choice([CYAN, YELLOW, MAGENTA, ORANGE, BLUE, GREEN, RED])
        self.x = WINDOW_WIDTH // 2 - len(self.shape[0]) * BLOCK_SIZE // 2
        self.y = 0

    def move_down(self):
        self.y += BLOCK_SIZE

    def move_left(self):
        self.x -= BLOCK_SIZE

    def move_right(self):
        self.x += BLOCK_SIZE

    def rotate(self):
        self.shape = list(zip(*reversed(self.shape)))

    def draw(self):
        for i in range(len(self.shape)):
            for j in range(len(self.shape[i])):
                if self.shape[i][j] == 1:
                    pygame.draw.rect(window, self.color, (self.x + j * BLOCK_SIZE, self.y + i * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))

    def is_collision(self, grid):
        for i in range(len(self.shape)):
            for j in range(len(self.shape[i])):
                if self.shape[i][j] == 1:
                    if self.y + i * BLOCK_SIZE >= WINDOW_HEIGHT or grid[(self.y + i * BLOCK_SIZE) // BLOCK_SIZE][(self.x + j * BLOCK_SIZE) // BLOCK_SIZE] == 1:
                        return True
        return False

    def merge(self, grid):
        for i in range(len(self.shape)):
            for j in range(len(self.shape[i])):
                if self.shape[i][j] == 1:
                    grid[(self.y + i * BLOCK_SIZE) // BLOCK_SIZE][(self.x + j * BLOCK_SIZE) // BLOCK_SIZE] = 1

# 初始化游戏网格
grid = [[0] * (WINDOW_WIDTH // BLOCK_SIZE) for _ in range(WINDOW_HEIGHT // BLOCK_SIZE)]

# 创建方块对象
current_block = Block()

# 游戏主循环
running = True
clock = pygame.time.Clock()
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                current_block.move_left()
                if current_block.is_collision(grid):
                    current_block.move_right()
            elif event.key == pygame.K_RIGHT:
                current_block.move_right()
                if current_block.is_collision(grid):
                    current_block.move_left()
            elif event.key == pygame.K_DOWN:
                current_block.move_down()
                if current_block.is_collision(grid):
                    current_block.move_up()
            elif event.key == pygame.K_SPACE:
                current_block.rotate()
                if current_block.is_collision(grid):
                    current_block.rotate()

    # 更新方块位置
    current_block.move_down()
    if current_block.is_collision(grid):
        current_block.move_up()
        current_block.merge(grid)
        current_block = Block()

    # 清空窗口
    window.fill(BLACK)

    # 绘制方块和网格
    current_block.draw()
    for i in range(len(grid)):
        for j抱歉，由于回答的文本长度限制，上述代码没有完整显示。以下是继续的代码：

```python
        if grid[i][j] == 1:
            pygame.draw.rect(window, WHITE, (j * BLOCK_SIZE, i * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))

    # 更新窗口
    pygame.display.update()

    # 设置帧率
    clock.tick(10)

# 退出游戏
pygame.quit()